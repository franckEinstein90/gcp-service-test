<h1>Simulator for Cloudrun application alerts</h1>
<p>This is a simulator to test alert and policies in gcp</p>
<hr/>

<div style="max-width: 50vw;background-color:yellow" class="request-error-tests">
    {{>errorTests}}
</div>

<h1>Timer</h1>
<div class="counter-display">
</div>

<div class="cpu-simulation">
    {{>cpuTests}}
</div>


<h1>Memory Information (backend)</h1>
<div>
    <button style="margin-bottom:2vh" onclick="allocateMemory()">Allocate memory</button>
</div>
<div style="display:flex">

    <div class="adhoc-memory-store">
    </div>

    <div class="mem-display">
    </div>
</div>

<script>

    const generateRandom200 = async()=>{
        const url='/ok200';
        const request = await fetch(url); 
        const response = await request.text(); 
        alert(response); 
    }

    const generateRandom500 = async()=>{
        const url='/error500';
        const request = await fetch(url); 
        const response = await request.text(); 
        alert(response); 
    }

    const generateRandom400 = async()=>{
        const url='/error400';
        const request = await fetch(url); 
        const response = await request.text(); 
        alert(response); 
    }


    const allocateMemory = async ()=>{
        const url='/addMem';
        const info = await fetch(url); 
        debugger; 
        return 0; 
    }

    const generateRandomRequestsOverOneMinute = async (numberOfRequests)=>{
        //get the current time
        const myTimer = ()=>{
        ctr+=1; 
        document.querySelector('.counter-display').innerHTML = ctr.toString(); 
        return getCPUInformation()
        .then(_ => getMemoryUsage())
        .then(_ => 'ok'); 

        setInterval(myTimer, 1000); 

   };
//
    } 

    const generateRandomRequests = async()=>{
        let numberOfRequest = 20; 
        const minutes = 1; 
        let minutesLeft = minutes;
/*        while(minutesLeft > 1) {
            calculateMinutesLeft(); 
            avgNumberOfRequest = numberOfRequest / minutesLeft; 
            const generatedRequests = await generateRandomRequests({duration:1, avgNumberOfRequest}); 
            numberOfRequest-=generatedRequests; 
        }*/

    }

    const generate5x500 = async ()=>{
        const url='/error500';
        const promiseArray = []; 

        for(let i=0; i<5;i++){
            promiseArray.push(fetch(url)); 
        }
        return Promise.all(promiseArray)
        .then(_ => alert('done')); 
    }

    let ctr = 0; 

    const getCPUInformation = ()=>{
        const url="/cpu"; 
        return fetch(url)
        .then( response => response.text())
        .then(cpuInfo =>{
            document.querySelector('.cpuInfo').innerHTML = cpuInfo; 
            return 'ok'
        })
    };

    const getMemoryUsage = ()=>{
        const url='/memoryUsage';
        return fetch(url)
        .then( response => response.text() )
        .then( text => {
            document.querySelector('.mem-display').innerHTML = text;  
            return 'ok'; 
        })
    };

    const myTimer = ()=>{
        ctr+=1; 
        document.querySelector('.counter-display').innerHTML = ctr.toString(); 
        return getCPUInformation()
        .then(_ => getMemoryUsage())
        .then(_ => 'ok'); 
   };
    setInterval(myTimer, 1000); 
</script>