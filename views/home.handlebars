<h1>Simulator for Cloudrun application alerts</h1>
<p>This is a simulator to test alert and policies in gcp</p>

<div class="request-error-tests">
    {{>errorTests}}
</div>

<h1>Timer</h1>
<div class="counter-display">
</div>

<div class="cpu-simulation">
    {{>cpuTests}}
</div>


<h1>Memory Information (backend)</h1>
<div>
    <button onclick="allocateMemory()">Allocate memory</button>
</div>
<div style="display:flex">

    <div class="adhoc-memory-store">
    </div>

    <div class="mem-display">
    </div>
</div>

<script>

    const allocateMemory = async ()=>{
        const url='/addMem';
        const info = await fetch(url); 
        debugger; 
        return 0; 
    }

    const generate5x500 = async ()=>{
        const url='/error500';
        const promiseArray = []; 

        for(let i=0; i<5;i++){
            promiseArray.push(fetch(url)); 
        }
        return Promise.all(promiseArray)
        .then(_ => alert('done')); 
    }

    let ctr = 0; 

    const getCPUInformation = ()=>{
        const url="/cpu"; 
        return fetch(url)
        .then( response => response.text())
        .then(cpuInfo =>{
            document.querySelector('.cpuInfo').innerHTML = cpuInfo; 
            return 'ok'
        })
    };

    const getMemoryUsage = ()=>{
        const url='/memoryUsage';
        return fetch(url)
        .then( response => response.text() )
        .then( text => {
            document.querySelector('.mem-display').innerHTML = text;  
            return 'ok'; 
        })
    };

    const myTimer = ()=>{
        ctr+=1; 
        document.querySelector('.counter-display').innerHTML = ctr.toString(); 
        return getCPUInformation()
        .then(_ => getMemoryUsage())
        .then(_ => 'ok'); 
   };
    setInterval(myTimer, 1000); 
</script>